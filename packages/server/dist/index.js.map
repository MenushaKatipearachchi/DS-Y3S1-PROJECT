{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["import fs from \"fs\";\r\nimport crypto from \"crypto\";\r\nimport express from \"express\";\r\nimport expressHealth from \"express-health-middleware\";\r\nimport compression from \"compression\";\r\nimport helmet from \"helmet\";\r\nimport cors from \"cors\";\r\nimport context from \"express-http-context\";\r\nimport stack from \"callsite\";\r\nimport { moduleLogger } from \"@sliit-foss/module-logger\";\r\nimport { correlationId } from \"@app/constants\";\r\nimport { errorHandler, responseInterceptor } from \"@app/middleware\";\r\nimport { connect as connectDatabase } from \"@app/mongoose\";\r\n\r\nconst initialize = ({\r\n  service,\r\n  routes,\r\n  lMiddleware = [],\r\n  cors: isCorsEnable,\r\n  database,\r\n  config,\r\n}) => {\r\n  const logger = moduleLogger(\"Server\");\r\n\r\n  const app = express();\r\n\r\n  app.use(helmet());\r\n  app.use(compression());\r\n\r\n  app.use(express.json({ limit: \"1mb\" }));\r\n  app.use(express.urlencoded({ extended: true }));\r\n\r\n  if (isCorsEnable) {\r\n    app.use(cors());\r\n  }\r\n\r\n  app.use(context.middleware);\r\n\r\n  app.use((req, _res, next) => {\r\n    _res.header(\"Access-Control-Allow-Origin\", \"*\"); // allow front end to access the api\r\n    _res.header(\r\n      \"Access-Control-Allow-Headers\",\r\n      \"Origin, X-Requested-With, Content-Type, Accept\"\r\n    );\r\n    context.set(\r\n      \"correlationId\",\r\n      req.headers[correlationId] ?? crypto.randomBytes(16).toString(\"hex\")\r\n    );\r\n    next();\r\n  });\r\n\r\n  if (database) {\r\n    connectDatabase(database);\r\n  }\r\n\r\n  app.use(\"/system\", expressHealth());\r\n\r\n  if (!routes) {\r\n    routes = express.Router();\r\n    const root = stack()\r\n      .find((site) => site.getFileName().endsWith(\"server.js\"))\r\n      ?.getFileName()\r\n      ?.replace(\"/server.js\", \"\")\r\n      ?.replace(\"\\\\server.js\", \"\");\r\n    fs.readdirSync(`${root}/modules`)?.forEach((module) => {\r\n      fs.readdirSync(`${root}/modules/${module}/api`)?.forEach((v) => {\r\n        routes.use(\r\n          `/${v}/${module}`,\r\n          require(`${root}/modules/${module}/api/${v}/controller`).default\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  app.use(`/api`, ...lMiddleware, routes);\r\n\r\n  app.use(responseInterceptor);\r\n\r\n  app.use(errorHandler);\r\n\r\n  // const HOST = config.HOST ?? \"0.0.0.0\";\r\n\r\n  app.listen(config.PORT, () => {\r\n    // logger.info(`${service} listening on ${HOST}:${config.PORT}`);\r\n    logger.info(`${service} listening on ${config.PORT}`);\r\n  });\r\n};\r\n\r\nexport default initialize;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAe;AACf,oBAAmB;AACnB,qBAAoB;AACpB,uCAA0B;AAC1B,yBAAwB;AACxB,oBAAmB;AACnB,kBAAiB;AACjB,kCAAoB;AACpB,sBAAkB;AAClB,2BAA6B;AAC7B,uBAA8B;AAC9B,wBAAkD;AAClD,sBAA2C;AAE3C,MAAM,aAAa,wBAAC;AAAA,EAClB;AAAA,EACA;AAAA,EACA,cAAc,CAAC;AAAA,EACf,MAAM;AAAA,EACN;AAAA,EACA;AACF,MAAM;AArBN;AAsBE,QAAM,aAAS,mCAAa,QAAQ;AAEpC,QAAM,UAAM,eAAAA,SAAQ;AAEpB,MAAI,QAAI,cAAAC,SAAO,CAAC;AAChB,MAAI,QAAI,mBAAAC,SAAY,CAAC;AAErB,MAAI,IAAI,eAAAF,QAAQ,KAAK,EAAE,OAAO,MAAM,CAAC,CAAC;AACtC,MAAI,IAAI,eAAAA,QAAQ,WAAW,EAAE,UAAU,KAAK,CAAC,CAAC;AAE9C,MAAI,cAAc;AAChB,QAAI,QAAI,YAAAG,SAAK,CAAC;AAAA,EAChB;AAEA,MAAI,IAAI,4BAAAC,QAAQ,UAAU;AAE1B,MAAI,IAAI,CAAC,KAAK,MAAM,SAAS;AAC3B,SAAK,OAAO,+BAA+B,GAAG;AAC9C,SAAK;AAAA,MACH;AAAA,MACA;AAAA,IACF;AACA,gCAAAA,QAAQ;AAAA,MACN;AAAA,MACA,IAAI,QAAQ,8BAAa,KAAK,cAAAC,QAAO,YAAY,EAAE,EAAE,SAAS,KAAK;AAAA,IACrE;AACA,SAAK;AAAA,EACP,CAAC;AAED,MAAI,UAAU;AACZ,wBAAAC,SAAgB,QAAQ;AAAA,EAC1B;AAEA,MAAI,IAAI,eAAW,iCAAAC,SAAc,CAAC;AAElC,MAAI,CAAC,QAAQ;AACX,aAAS,eAAAP,QAAQ,OAAO;AACxB,UAAM,QAAO,qCAAAQ,SAAM,EAChB,KAAK,CAAC,SAAS,KAAK,YAAY,EAAE,SAAS,WAAW,CAAC,MAD7C,mBAET,kBAFS,mBAGT,QAAQ,cAAc,QAHb,mBAIT,QAAQ,eAAe;AAC3B,oBAAAC,QAAG,YAAY,GAAG,cAAc,MAAhC,mBAAmC,QAAQ,CAACC,YAAW;AAhE3D,UAAAC;AAiEM,OAAAA,MAAA,UAAAF,QAAG,YAAY,GAAG,gBAAgBC,aAAY,MAA9C,gBAAAC,IAAiD,QAAQ,CAAC,MAAM;AAC9D,eAAO;AAAA,UACL,IAAI,KAAKD;AAAA,UACT,QAAQ,GAAG,gBAAgBA,eAAc,cAAc,EAAE;AAAA,QAC3D;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,MAAI,IAAI,QAAQ,GAAG,aAAa,MAAM;AAEtC,MAAI,IAAI,qCAAmB;AAE3B,MAAI,IAAI,8BAAY;AAIpB,MAAI,OAAO,OAAO,MAAM,MAAM;AAE5B,WAAO,KAAK,GAAG,wBAAwB,OAAO,MAAM;AAAA,EACtD,CAAC;AACH,GAxEmB;AA0EnB,IAAO,cAAQ;",
  "names": ["express", "helmet", "compression", "cors", "context", "crypto", "connectDatabase", "expressHealth", "stack", "fs", "module", "_a"]
}
