{
  "version": 3,
  "sources": ["../../../../../src/modules/auth/api/v1/controller.js"],
  "sourcesContent": ["import express from \"express\";\nimport { celebrate, Segments } from \"celebrate\";\nimport { tracedAsyncHandler, traced } from \"@sliit-foss/functions\";\nimport { toSuccess } from \"@app/middleware\";\nimport {\n  serviceLogin,\n  serviceRegister,\n  serviceRefreshToken,\n  serviceVerifyUser,\n  serviceLogout,\n} from \"./service\";\nimport { loginSchema, registerSchema, refreshTokenSchema } from \"./schema\";\n\nconst auth = express.Router();\n\nauth.post(\n  \"/login\",\n  celebrate({ [Segments.BODY]: loginSchema }),\n  tracedAsyncHandler(async function controllerLogin(req, res) {\n    const data = await traced(serviceLogin)(req.body);\n\n    //  const refresh_token = data.refresh_token; in case you want to use refresh token as a cookie\n    //  res.cookie('refresh_token', refresh_token, { httpOnly: true, maxAge: 1000 * 60 * 60 * 24  });\n\n    return toSuccess({ res, data, message: \"Login successfull!\" });\n  })\n);\n\nauth.post(\n  \"/register\",\n  celebrate({ [Segments.BODY]: registerSchema }),\n  tracedAsyncHandler(async function controllerRegister(req, res) {\n    const data = await traced(serviceRegister)(req.body);\n    return toSuccess({ res, data, message: \"Registration successfull!\" });\n  })\n);\n\nauth.post(\n  \"/refresh-token\",\n  celebrate({ [Segments.BODY]: refreshTokenSchema }),\n  tracedAsyncHandler(async function controllerRefreshToken(req, res) {\n    const data = await traced(serviceRefreshToken)(req.body.refresh_token);\n    return toSuccess({ res, data, message: \"Token refresh successfull!\" });\n  })\n);\n\nauth.get(\n  \"/verify/:code\",\n  tracedAsyncHandler(async function controllerVerifyUser(req, res) {\n    await traced(serviceVerifyUser)(req.params.code);\n    return toSuccess({ res, message: \"User verified successfully!\" });\n  })\n);\n\nauth.get(\n  \"/current\",\n  tracedAsyncHandler(function controllerGetAuthUser(req, res) {\n    delete req.user.password;\n    return toSuccess({\n      res,\n      data: req.user,\n      message: \"Auth user fetched successfully!\",\n    });\n  })\n);\n\nauth.post(\n  \"/logout\",\n  tracedAsyncHandler(async function controllerLogout(req, res) {\n    await traced(serviceLogout)(req.token);\n    return toSuccess({ res, message: \"Logout successfull!\" });\n  })\n);\n\nexport default auth;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoB;AACpB,uBAAoC;AACpC,uBAA2C;AAC3C,wBAA0B;AAC1B,qBAMO;AACP,oBAAgE;AAEhE,MAAM,OAAO,eAAAA,QAAQ,OAAO;AAE5B,KAAK;AAAA,EACH;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,IAAI,GAAG,0BAAY,CAAC;AAAA,MAC1C,qCAAmB,sCAAe,gBAAgB,KAAK,KAAK;AAC1D,UAAM,OAAO,UAAM,yBAAO,2BAAY,EAAE,IAAI,IAAI;AAKhD,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,qBAAqB,CAAC;AAAA,EAC/D,GAPmB,kBAOlB;AACH;AAEA,KAAK;AAAA,EACH;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,IAAI,GAAG,6BAAe,CAAC;AAAA,MAC7C,qCAAmB,sCAAe,mBAAmB,KAAK,KAAK;AAC7D,UAAM,OAAO,UAAM,yBAAO,8BAAe,EAAE,IAAI,IAAI;AACnD,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,4BAA4B,CAAC;AAAA,EACtE,GAHmB,qBAGlB;AACH;AAEA,KAAK;AAAA,EACH;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,IAAI,GAAG,iCAAmB,CAAC;AAAA,MACjD,qCAAmB,sCAAe,uBAAuB,KAAK,KAAK;AACjE,UAAM,OAAO,UAAM,yBAAO,kCAAmB,EAAE,IAAI,KAAK,aAAa;AACrE,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,6BAA6B,CAAC;AAAA,EACvE,GAHmB,yBAGlB;AACH;AAEA,KAAK;AAAA,EACH;AAAA,MACA,qCAAmB,sCAAe,qBAAqB,KAAK,KAAK;AAC/D,cAAM,yBAAO,gCAAiB,EAAE,IAAI,OAAO,IAAI;AAC/C,eAAO,6BAAU,EAAE,KAAK,SAAS,8BAA8B,CAAC;AAAA,EAClE,GAHmB,uBAGlB;AACH;AAEA,KAAK;AAAA,EACH;AAAA,MACA,qCAAmB,gCAAS,sBAAsB,KAAK,KAAK;AAC1D,WAAO,IAAI,KAAK;AAChB,eAAO,6BAAU;AAAA,MACf;AAAA,MACA,MAAM,IAAI;AAAA,MACV,SAAS;AAAA,IACX,CAAC;AAAA,EACH,GAPmB,wBAOlB;AACH;AAEA,KAAK;AAAA,EACH;AAAA,MACA,qCAAmB,sCAAe,iBAAiB,KAAK,KAAK;AAC3D,cAAM,yBAAO,4BAAa,EAAE,IAAI,KAAK;AACrC,eAAO,6BAAU,EAAE,KAAK,SAAS,sBAAsB,CAAC;AAAA,EAC1D,GAHmB,mBAGlB;AACH;AAEA,IAAO,qBAAQ;",
  "names": ["express"]
}
