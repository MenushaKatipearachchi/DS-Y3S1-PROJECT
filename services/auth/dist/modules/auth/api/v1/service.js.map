{
  "version": 3,
  "sources": ["../../../../../src/modules/auth/api/v1/service.js"],
  "sourcesContent": ["/* eslint-disable import/named */\r\n\r\nimport crypto from \"crypto\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport createError from \"http-errors\";\r\nimport { traced } from \"@sliit-foss/functions\";\r\nimport {\r\n  createUser,\r\n  getUserByEmail,\r\n  getUserById,\r\n  //  eslint-disable-next-line no-unused-vars\r\n  sendVerificationEmail,\r\n  verifyUser,\r\n} from \"../../../../services\";\r\nimport { errors, verify, generateTokens } from \"../../../../utils\";\r\nimport { constructVerificationEmailPayload } from \"./mappers\";\r\n\r\nexport const serviceLogin = async ({ email, password }) => {\r\n  const user = await getUserByEmail(email);\r\n  if (!user) throw errors.invalid_email;\r\n  if (!user.is_active) throw errors.user_deactivated;\r\n\r\n  const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n  if (!isMatch) throw errors.invalid_password;\r\n  if (!user.is_verified) throw errors.unverified_user;\r\n\r\n  return traced(generateTokens)(user);\r\n};\r\n\r\nexport const serviceRegister = async ({ name, email, password, address }) => {\r\n  const user = await getUserByEmail(email);\r\n  if (user) {\r\n    throw createError(400, \"User already exists\");\r\n  }\r\n  const code = crypto.randomUUID();\r\n  sendVerificationEmail(constructVerificationEmailPayload(name, email, code));\r\n\r\n  return createUser({\r\n    name,\r\n    email,\r\n    password,\r\n    address,\r\n    verification_code: code,\r\n  });\r\n};\r\n\r\nexport const serviceRefreshToken = async (token) => {\r\n  const decodedRefreshToken = verify(token);\r\n  const decodedUser = verify(decodedRefreshToken.access_token, true);\r\n  const user = await getUserById(decodedUser._id);\r\n  if (!user) {\r\n    throw errors.invalid_token;\r\n  }\r\n  if (!user.is_active) {\r\n    throw errors.user_deactivated;\r\n  }\r\n  return traced(generateTokens)(user);\r\n};\r\n\r\nexport const serviceVerifyUser = async (code) => {\r\n  const result = await verifyUser(code);\r\n  if (!result.matchedCount) {\r\n    throw errors.invalid_code;\r\n  }\r\n  return;\r\n};\r\n\r\n//  eslint-disable-next-line no-unused-vars\r\nexport const serviceLogout = (token) => {};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,oBAAmB;AACnB,sBAAmB;AACnB,yBAAwB;AACxB,uBAAuB;AACvB,sBAOO;AACP,mBAA+C;AAC/C,qBAAkD;AAE3C,MAAM,eAAe,8BAAO,EAAE,OAAO,SAAS,MAAM;AACzD,QAAM,OAAO,UAAM,gCAAe,KAAK;AACvC,MAAI,CAAC;AAAM,UAAM,oBAAO;AACxB,MAAI,CAAC,KAAK;AAAW,UAAM,oBAAO;AAElC,QAAM,UAAU,MAAM,gBAAAA,QAAO,QAAQ,UAAU,KAAK,QAAQ;AAE5D,MAAI,CAAC;AAAS,UAAM,oBAAO;AAC3B,MAAI,CAAC,KAAK;AAAa,UAAM,oBAAO;AAEpC,aAAO,yBAAO,2BAAc,EAAE,IAAI;AACpC,GAX4B;AAarB,MAAM,kBAAkB,8BAAO,EAAE,MAAM,OAAO,UAAU,QAAQ,MAAM;AAC3E,QAAM,OAAO,UAAM,gCAAe,KAAK;AACvC,MAAI,MAAM;AACR,cAAM,mBAAAC,SAAY,KAAK,qBAAqB;AAAA,EAC9C;AACA,QAAM,OAAO,cAAAC,QAAO,WAAW;AAC/B,iDAAsB,kDAAkC,MAAM,OAAO,IAAI,CAAC;AAE1E,aAAO,4BAAW;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,mBAAmB;AAAA,EACrB,CAAC;AACH,GAf+B;AAiBxB,MAAM,sBAAsB,8BAAO,UAAU;AAClD,QAAM,0BAAsB,qBAAO,KAAK;AACxC,QAAM,kBAAc,qBAAO,oBAAoB,cAAc,IAAI;AACjE,QAAM,OAAO,UAAM,6BAAY,YAAY,GAAG;AAC9C,MAAI,CAAC,MAAM;AACT,UAAM,oBAAO;AAAA,EACf;AACA,MAAI,CAAC,KAAK,WAAW;AACnB,UAAM,oBAAO;AAAA,EACf;AACA,aAAO,yBAAO,2BAAc,EAAE,IAAI;AACpC,GAXmC;AAa5B,MAAM,oBAAoB,8BAAO,SAAS;AAC/C,QAAM,SAAS,UAAM,4BAAW,IAAI;AACpC,MAAI,CAAC,OAAO,cAAc;AACxB,UAAM,oBAAO;AAAA,EACf;AACA;AACF,GANiC;AAS1B,MAAM,gBAAgB,wBAAC,UAAU;AAAC,GAAZ;",
  "names": ["bcrypt", "createError", "crypto"]
}
