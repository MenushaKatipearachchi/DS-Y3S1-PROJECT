{
  "version": 3,
  "sources": ["../../../../../src/modules/delivery/api/v1/controller.js"],
  "sourcesContent": ["import express from \"express\";\r\n// import mongoose from \"mongoose\";\r\nimport { celebrate, Segments } from \"celebrate\";\r\nimport { default as filterQuery } from \"@sliit-foss/mongoose-filter-query\";\r\nimport { asyncHandler } from \"@sliit-foss/functions\";\r\nimport { objectIdSchema } from \"@app/constants\";\r\nimport { toSuccess } from \"@app/middleware\";\r\nimport {\r\n  serviceCreateDelivery,\r\n  serviceGetDeliveries,\r\n  serviceGetDeliveryById,\r\n  serviceUpdateDeliveryById,\r\n  serviceDeleteDeliveryById,\r\n} from \"./service\";\r\n\r\nimport { createDeliverySchema, updateDeliverySchema } from \"./schema\";\r\n\r\nconst delivery = express.Router();\r\n\r\ndelivery.post(\r\n  \"/\",\r\n  celebrate({ [Segments.BODY]: createDeliverySchema }),\r\n  asyncHandler(async function controllerCreateDelivery(req, res) {\r\n    const data = await serviceCreateDelivery(req.body);\r\n    return toSuccess({\r\n      res,\r\n      data,\r\n      message: \"Delivery created successfully!\",\r\n    });\r\n  })\r\n);\r\n\r\ndelivery.get(\r\n  \"/\",\r\n  filterQuery,\r\n  asyncHandler(async function controllerGetDeliveries(req, res) {\r\n    const data = await serviceGetDeliveries(\r\n      req.query.filter,\r\n      req.query.sort,\r\n      req.query.page,\r\n      req.query.limit\r\n    );\r\n    return toSuccess({ res, data, message: \"Deliverys fetched successfully!\" });\r\n  })\r\n);\r\n\r\ndelivery.get(\r\n  \"/:id\",\r\n  celebrate({ [Segments.PARAMS]: objectIdSchema() }),\r\n  asyncHandler(async function controllerGetDeliveryById(req, res) {\r\n    const data = await serviceGetDeliveryById(req.params.id);\r\n    return toSuccess({ res, data, message: \"Delivery fetched successfully!\" });\r\n  })\r\n);\r\n\r\ndelivery.patch(\r\n  \"/:id\",\r\n  celebrate({\r\n    [Segments.PARAMS]: objectIdSchema(),\r\n    [Segments.BODY]: updateDeliverySchema,\r\n  }),\r\n  asyncHandler(async function controllerUpdateDeliveryById(req, res) {\r\n    const data = await serviceUpdateDeliveryById(req.params.id, req.body);\r\n    return toSuccess({ res, data, message: \"Delivery updated successfully!\" });\r\n  })\r\n);\r\n\r\ndelivery.delete(\r\n  \"/:id\",\r\n  celebrate({ [Segments.PARAMS]: objectIdSchema() }),\r\n  asyncHandler(async function controllerDeleteDeliveryById(req, res) {\r\n    const data = await serviceDeleteDeliveryById(req.params.id);\r\n    return toSuccess({ res, data, message: \"Delivery deleted successfully!\" });\r\n  })\r\n);\r\n\r\nexport default delivery;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoB;AAEpB,uBAAoC;AACpC,mCAAuC;AACvC,uBAA6B;AAC7B,uBAA+B;AAC/B,wBAA0B;AAC1B,qBAMO;AAEP,oBAA2D;AAE3D,MAAM,WAAW,eAAAA,QAAQ,OAAO;AAEhC,SAAS;AAAA,EACP;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,IAAI,GAAG,mCAAqB,CAAC;AAAA,MACnD,+BAAa,sCAAe,yBAAyB,KAAK,KAAK;AAC7D,UAAM,OAAO,UAAM,sCAAsB,IAAI,IAAI;AACjD,eAAO,6BAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAAA,EACH,GAPa,2BAOZ;AACH;AAEA,SAAS;AAAA,EACP;AAAA,EACA,6BAAAC;AAAA,MACA,+BAAa,sCAAe,wBAAwB,KAAK,KAAK;AAC5D,UAAM,OAAO,UAAM;AAAA,MACjB,IAAI,MAAM;AAAA,MACV,IAAI,MAAM;AAAA,MACV,IAAI,MAAM;AAAA,MACV,IAAI,MAAM;AAAA,IACZ;AACA,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,kCAAkC,CAAC;AAAA,EAC5E,GARa,0BAQZ;AACH;AAEA,SAAS;AAAA,EACP;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,MAAM,OAAG,iCAAe,EAAE,CAAC;AAAA,MACjD,+BAAa,sCAAe,0BAA0B,KAAK,KAAK;AAC9D,UAAM,OAAO,UAAM,uCAAuB,IAAI,OAAO,EAAE;AACvD,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,iCAAiC,CAAC;AAAA,EAC3E,GAHa,4BAGZ;AACH;AAEA,SAAS;AAAA,EACP;AAAA,MACA,4BAAU;AAAA,IACR,CAAC,0BAAS,MAAM,OAAG,iCAAe;AAAA,IAClC,CAAC,0BAAS,IAAI,GAAG;AAAA,EACnB,CAAC;AAAA,MACD,+BAAa,sCAAe,6BAA6B,KAAK,KAAK;AACjE,UAAM,OAAO,UAAM,0CAA0B,IAAI,OAAO,IAAI,IAAI,IAAI;AACpE,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,iCAAiC,CAAC;AAAA,EAC3E,GAHa,+BAGZ;AACH;AAEA,SAAS;AAAA,EACP;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,MAAM,OAAG,iCAAe,EAAE,CAAC;AAAA,MACjD,+BAAa,sCAAe,6BAA6B,KAAK,KAAK;AACjE,UAAM,OAAO,UAAM,0CAA0B,IAAI,OAAO,EAAE;AAC1D,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,iCAAiC,CAAC;AAAA,EAC3E,GAHa,+BAGZ;AACH;AAEA,IAAO,qBAAQ;",
  "names": ["express", "filterQuery"]
}
