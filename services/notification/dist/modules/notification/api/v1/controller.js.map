{
  "version": 3,
  "sources": ["../../../../../src/modules/notification/api/v1/controller.js"],
  "sourcesContent": ["import express from \"express\";\r\n// import mongoose from \"mongoose\";\r\nimport { celebrate, Segments } from \"celebrate\";\r\nimport { default as filterQuery } from \"@sliit-foss/mongoose-filter-query\";\r\nimport { asyncHandler } from \"@sliit-foss/functions\";\r\nimport { objectIdSchema } from \"@app/constants\";\r\nimport { toSuccess } from \"@app/middleware\";\r\nimport {\r\n  serviceCreateNotification,\r\n  serviceGetNotifications,\r\n  serviceGetNotificationById,\r\n  serviceUpdateNotificationById,\r\n  serviceDeleteNotificationById,\r\n} from \"./service\";\r\n\r\n// ----------------------------------\r\n// serviceGetNotification,\r\n// serviceNotificationsByUser,\r\n// serviceUpdateNotificationRead\r\n// ----------------------------------\r\n\r\nimport { createNotificationSchema, updateNotificationSchema } from \"./schema\";\r\n/*\r\n\r\n// FIREBASE\r\n\r\nconst admin = require('firebase-admin');\r\n// const express = require('express');\r\n\r\nconst app = express();\r\n\r\n// Initialize Firebase admin SDK\r\nadmin.initializeApp({\r\n  credential: admin.credential.applicationDefault(),\r\n  databaseURL: 'https://distributedsystemsprojec-b662c.firebaseio.com',\r\n});\r\n\r\n// ----\r\nconst { celebrate, Segments, Joi } = require('celebrate');\r\nconst asyncHandler = require('express-async-handler');\r\n\r\napp.post('/',\r\n  celebrate({\r\n    [Segments.BODY]: Joi.object().keys({\r\n      token: Joi.string().required(),\r\n      // add any other validation rules for your message object\r\n    }),\r\n  }),\r\n  asyncHandler(async (req, res) => {\r\n    const { token, ...message } = req.body;\r\n    await admin.messaging().send({\r\n      token,\r\n      notification: {\r\n        ...message,\r\n      },\r\n    });\r\n    res.send('Message sent successfully');\r\n  })\r\n);\r\n\r\n// -------------------\r\n\r\n*/\r\nconst notification = express.Router();\r\n\r\nnotification.post(\r\n  \"/\",\r\n  celebrate({ [Segments.BODY]: createNotificationSchema }),\r\n  asyncHandler(async function controllerCreateNotification(req, res) {\r\n    const data = await serviceCreateNotification(req.body);\r\n    return toSuccess({\r\n      res,\r\n      data,\r\n      message: \"Notification created successfully!\",\r\n    });\r\n  })\r\n);\r\n\r\nnotification.get(\r\n  \"/\",\r\n  filterQuery,\r\n  asyncHandler(async function controllerGetNotifications(req, res) {\r\n    const data = await serviceGetNotifications(\r\n      req.query.filter,\r\n      req.query.sort,\r\n      req.query.page,\r\n      req.query.limit\r\n    );\r\n    return toSuccess({\r\n      res,\r\n      data,\r\n      message: \"Notifications fetched successfully!\",\r\n    });\r\n  })\r\n);\r\n\r\nnotification.get(\r\n  \"/:id\",\r\n  celebrate({ [Segments.PARAMS]: objectIdSchema() }),\r\n  asyncHandler(async function controllerGetNotificationById(req, res) {\r\n    const data = await serviceGetNotificationById(req.params.id);\r\n    return toSuccess({\r\n      res,\r\n      data,\r\n      message: \"Notification fetched successfully!\",\r\n    });\r\n  })\r\n);\r\n\r\nnotification.patch(\r\n  \"/:id\",\r\n  celebrate({\r\n    [Segments.PARAMS]: objectIdSchema(),\r\n    [Segments.BODY]: updateNotificationSchema,\r\n  }),\r\n  asyncHandler(async function controllerUpdateNotificationById(req, res) {\r\n    const data = await serviceUpdateNotificationById(req.params.id, req.body);\r\n    return toSuccess({\r\n      res,\r\n      data,\r\n      message: \"Notification updated successfully!\",\r\n    });\r\n  })\r\n);\r\n\r\nnotification.delete(\r\n  \"/:id\",\r\n  celebrate({ [Segments.PARAMS]: objectIdSchema() }),\r\n  asyncHandler(async function controllerDeleteNotificationById(req, res) {\r\n    const data = await serviceDeleteNotificationById(req.params.id);\r\n    return toSuccess({\r\n      res,\r\n      data,\r\n      message: \"Notification deleted successfully!\",\r\n    });\r\n  })\r\n);\r\n\r\nexport default notification;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoB;AAEpB,uBAAoC;AACpC,mCAAuC;AACvC,uBAA6B;AAC7B,uBAA+B;AAC/B,wBAA0B;AAC1B,qBAMO;AAQP,oBAAmE;AA0CnE,MAAM,eAAe,eAAAA,QAAQ,OAAO;AAEpC,aAAa;AAAA,EACX;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,IAAI,GAAG,uCAAyB,CAAC;AAAA,MACvD,+BAAa,sCAAe,6BAA6B,KAAK,KAAK;AACjE,UAAM,OAAO,UAAM,0CAA0B,IAAI,IAAI;AACrD,eAAO,6BAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAAA,EACH,GAPa,+BAOZ;AACH;AAEA,aAAa;AAAA,EACX;AAAA,EACA,6BAAAC;AAAA,MACA,+BAAa,sCAAe,2BAA2B,KAAK,KAAK;AAC/D,UAAM,OAAO,UAAM;AAAA,MACjB,IAAI,MAAM;AAAA,MACV,IAAI,MAAM;AAAA,MACV,IAAI,MAAM;AAAA,MACV,IAAI,MAAM;AAAA,IACZ;AACA,eAAO,6BAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAAA,EACH,GAZa,6BAYZ;AACH;AAEA,aAAa;AAAA,EACX;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,MAAM,OAAG,iCAAe,EAAE,CAAC;AAAA,MACjD,+BAAa,sCAAe,8BAA8B,KAAK,KAAK;AAClE,UAAM,OAAO,UAAM,2CAA2B,IAAI,OAAO,EAAE;AAC3D,eAAO,6BAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAAA,EACH,GAPa,gCAOZ;AACH;AAEA,aAAa;AAAA,EACX;AAAA,MACA,4BAAU;AAAA,IACR,CAAC,0BAAS,MAAM,OAAG,iCAAe;AAAA,IAClC,CAAC,0BAAS,IAAI,GAAG;AAAA,EACnB,CAAC;AAAA,MACD,+BAAa,sCAAe,iCAAiC,KAAK,KAAK;AACrE,UAAM,OAAO,UAAM,8CAA8B,IAAI,OAAO,IAAI,IAAI,IAAI;AACxE,eAAO,6BAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAAA,EACH,GAPa,mCAOZ;AACH;AAEA,aAAa;AAAA,EACX;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,MAAM,OAAG,iCAAe,EAAE,CAAC;AAAA,MACjD,+BAAa,sCAAe,iCAAiC,KAAK,KAAK;AACrE,UAAM,OAAO,UAAM,8CAA8B,IAAI,OAAO,EAAE;AAC9D,eAAO,6BAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAAA,EACH,GAPa,mCAOZ;AACH;AAEA,IAAO,qBAAQ;",
  "names": ["express", "filterQuery"]
}
