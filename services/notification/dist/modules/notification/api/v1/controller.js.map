{
  "version": 3,
  "sources": ["../../../../../src/modules/notification/api/v1/controller.js"],
  "sourcesContent": ["import express from \"express\";\n// import mongoose from \"mongoose\";\nimport { celebrate, Segments } from \"celebrate\";\nimport { default as filterQuery } from \"@sliit-foss/mongoose-filter-query\";\nimport { asyncHandler } from \"@sliit-foss/functions\";\nimport { objectIdSchema } from \"@app/constants\";\nimport { toSuccess } from \"@app/middleware\";\nimport {\n  serviceCreateNotification,\n  serviceGetNotifications,\n  serviceGetNotificationById,\n  serviceUpdateNotificationById,\n  serviceDeleteNotificationById,\n} from \"./service\";\n\n// ----------------------------------\n// serviceGetNotification,\n// serviceNotificationsByUser,\n// serviceUpdateNotificationRead\n// ----------------------------------\n\nimport { createNotificationSchema, updateNotificationSchema } from \"./schema\";\n/*\n\n// FIREBASE\n\nconst admin = require('firebase-admin');\n// const express = require('express');\n\nconst app = express();\n\n// Initialize Firebase admin SDK\nadmin.initializeApp({\n  credential: admin.credential.applicationDefault(),\n  databaseURL: 'https://distributedsystemsprojec-b662c.firebaseio.com',\n});\n\n// ----\nconst { celebrate, Segments, Joi } = require('celebrate');\nconst asyncHandler = require('express-async-handler');\n\napp.post('/',\n  celebrate({\n    [Segments.BODY]: Joi.object().keys({\n      token: Joi.string().required(),\n      // add any other validation rules for your message object\n    }),\n  }),\n  asyncHandler(async (req, res) => {\n    const { token, ...message } = req.body;\n    await admin.messaging().send({\n      token,\n      notification: {\n        ...message,\n      },\n    });\n    res.send('Message sent successfully');\n  })\n);\n\n// -------------------\n\n*/\nconst notification = express.Router();\n\nnotification.post(\n  \"/\",\n  celebrate({ [Segments.BODY]: createNotificationSchema }),\n  asyncHandler(async function controllerCreateNotification(req, res) {\n    const data = await serviceCreateNotification(req.body);\n    return toSuccess({\n      res,\n      data,\n      message: \"Notification created successfully!\",\n    });\n  })\n);\n\nnotification.get(\n  \"/\",\n  filterQuery,\n  asyncHandler(async function controllerGetNotifications(req, res) {\n    const data = await serviceGetNotifications(\n      req.query.filter,\n      req.query.sort,\n      req.query.page,\n      req.query.limit\n    );\n    return toSuccess({\n      res,\n      data,\n      message: \"Notifications fetched successfully!\",\n    });\n  })\n);\n\nnotification.get(\n  \"/:id\",\n  celebrate({ [Segments.PARAMS]: objectIdSchema() }),\n  asyncHandler(async function controllerGetNotificationById(req, res) {\n    const data = await serviceGetNotificationById(req.params.id);\n    return toSuccess({\n      res,\n      data,\n      message: \"Notification fetched successfully!\",\n    });\n  })\n);\n\nnotification.patch(\n  \"/:id\",\n  celebrate({\n    [Segments.PARAMS]: objectIdSchema(),\n    [Segments.BODY]: updateNotificationSchema,\n  }),\n  asyncHandler(async function controllerUpdateNotificationById(req, res) {\n    const data = await serviceUpdateNotificationById(req.params.id, req.body);\n    return toSuccess({\n      res,\n      data,\n      message: \"Notification updated successfully!\",\n    });\n  })\n);\n\nnotification.delete(\n  \"/:id\",\n  celebrate({ [Segments.PARAMS]: objectIdSchema() }),\n  asyncHandler(async function controllerDeleteNotificationById(req, res) {\n    const data = await serviceDeleteNotificationById(req.params.id);\n    return toSuccess({\n      res,\n      data,\n      message: \"Notification deleted successfully!\",\n    });\n  })\n);\n\nexport default notification;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoB;AAEpB,uBAAoC;AACpC,mCAAuC;AACvC,uBAA6B;AAC7B,uBAA+B;AAC/B,wBAA0B;AAC1B,qBAMO;AAQP,oBAAmE;AA0CnE,MAAM,eAAe,eAAAA,QAAQ,OAAO;AAEpC,aAAa;AAAA,EACX;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,IAAI,GAAG,uCAAyB,CAAC;AAAA,MACvD,+BAAa,sCAAe,6BAA6B,KAAK,KAAK;AACjE,UAAM,OAAO,UAAM,0CAA0B,IAAI,IAAI;AACrD,eAAO,6BAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAAA,EACH,GAPa,+BAOZ;AACH;AAEA,aAAa;AAAA,EACX;AAAA,EACA,6BAAAC;AAAA,MACA,+BAAa,sCAAe,2BAA2B,KAAK,KAAK;AAC/D,UAAM,OAAO,UAAM;AAAA,MACjB,IAAI,MAAM;AAAA,MACV,IAAI,MAAM;AAAA,MACV,IAAI,MAAM;AAAA,MACV,IAAI,MAAM;AAAA,IACZ;AACA,eAAO,6BAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAAA,EACH,GAZa,6BAYZ;AACH;AAEA,aAAa;AAAA,EACX;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,MAAM,OAAG,iCAAe,EAAE,CAAC;AAAA,MACjD,+BAAa,sCAAe,8BAA8B,KAAK,KAAK;AAClE,UAAM,OAAO,UAAM,2CAA2B,IAAI,OAAO,EAAE;AAC3D,eAAO,6BAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAAA,EACH,GAPa,gCAOZ;AACH;AAEA,aAAa;AAAA,EACX;AAAA,MACA,4BAAU;AAAA,IACR,CAAC,0BAAS,MAAM,OAAG,iCAAe;AAAA,IAClC,CAAC,0BAAS,IAAI,GAAG;AAAA,EACnB,CAAC;AAAA,MACD,+BAAa,sCAAe,iCAAiC,KAAK,KAAK;AACrE,UAAM,OAAO,UAAM,8CAA8B,IAAI,OAAO,IAAI,IAAI,IAAI;AACxE,eAAO,6BAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAAA,EACH,GAPa,mCAOZ;AACH;AAEA,aAAa;AAAA,EACX;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,MAAM,OAAG,iCAAe,EAAE,CAAC;AAAA,MACjD,+BAAa,sCAAe,iCAAiC,KAAK,KAAK;AACrE,UAAM,OAAO,UAAM,8CAA8B,IAAI,OAAO,EAAE;AAC9D,eAAO,6BAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAAA,EACH,GAPa,mCAOZ;AACH;AAEA,IAAO,qBAAQ;",
  "names": ["express", "filterQuery"]
}
