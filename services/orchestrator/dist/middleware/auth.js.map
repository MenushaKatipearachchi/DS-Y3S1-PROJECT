{
  "version": 3,
  "sources": ["../../src/middleware/auth.js"],
  "sourcesContent": ["import context from \"express-http-context\";\r\nimport createError from \"http-errors\";\r\nimport { asyncHandler, tracedAsyncHandler } from \"@sliit-foss/functions\";\r\nimport { moduleLogger } from \"@sliit-foss/module-logger\";\r\nimport { protectedRoutes } from \"@app/constants\";\r\nimport { getAuthUser } from \"../services\";\r\n\r\nconst logger = moduleLogger(\"Auth-middleware\");\r\n\r\nexport const authorizer = tracedAsyncHandler(async function authorizer(req) {\r\n  if (protectedRoutes.find((route) => req.path.match(new RegExp(route)))) {\r\n    return;\r\n  }\r\n  context.set(\"headers\", req.headers);\r\n  const user = await getAuthUser();\r\n  req.user = user;\r\n  req.headers[\"x-user-id\"] = user._id;\r\n  req.headers[\"x-user-role\"] = user.role;\r\n  req.headers[\"x-user-email\"] = user.email;\r\n});\r\n\r\nexport const permittedRoles = (roles) =>\r\n  asyncHandler(function roleGuard(req) {\r\n    if (roles && !roles.includes(req.user.role)) {\r\n      logger.error(\r\n        `Forbidden route - access denied - user_id: ${req.user._id} - role: ${req.user.role}`\r\n      );\r\n      throw createError(403, \"Route forbidden\");\r\n    }\r\n  });\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAoB;AACpB,yBAAwB;AACxB,uBAAiD;AACjD,2BAA6B;AAC7B,uBAAgC;AAChC,sBAA4B;AAE5B,MAAM,aAAS,mCAAa,iBAAiB;AAEtC,MAAM,iBAAa,qCAAmB,sCAAeA,YAAW,KAAK;AAC1E,MAAI,iCAAgB,KAAK,CAAC,UAAU,IAAI,KAAK,MAAM,IAAI,OAAO,KAAK,CAAC,CAAC,GAAG;AACtE;AAAA,EACF;AACA,8BAAAC,QAAQ,IAAI,WAAW,IAAI,OAAO;AAClC,QAAM,OAAO,UAAM,6BAAY;AAC/B,MAAI,OAAO;AACX,MAAI,QAAQ,WAAW,IAAI,KAAK;AAChC,MAAI,QAAQ,aAAa,IAAI,KAAK;AAClC,MAAI,QAAQ,cAAc,IAAI,KAAK;AACrC,GAV6C,aAU5C;AAEM,MAAM,iBAAiB,wBAAC,cAC7B,+BAAa,gCAAS,UAAU,KAAK;AACnC,MAAI,SAAS,CAAC,MAAM,SAAS,IAAI,KAAK,IAAI,GAAG;AAC3C,WAAO;AAAA,MACL,8CAA8C,IAAI,KAAK,eAAe,IAAI,KAAK;AAAA,IACjF;AACA,cAAM,mBAAAC,SAAY,KAAK,iBAAiB;AAAA,EAC1C;AACF,GAPa,YAOZ,GAR2B;",
  "names": ["authorizer", "context", "createError"]
}
