{
  "version": 3,
  "sources": ["../../../../../src/modules/payments/api/v1/controller.js"],
  "sourcesContent": ["import express from \"express\";\nimport mongoose from \"mongoose\";\nimport { celebrate, Segments } from \"celebrate\";\nimport { default as filterQuery } from \"@sliit-foss/mongoose-filter-query\";\nimport { asyncHandler } from \"@sliit-foss/functions\";\nimport { objectIdSchema } from \"@app/constants\";\nimport { toSuccess } from \"@app/middleware\";\nimport {\n  serviceCreatePayment,\n  serviceGetPayments,\n  serviceGetPaymentById,\n  serviceUpdatePaymentById,\n  serviceDeletePaymentById,\n} from \"./service\";\n\nimport { createPaymentSchema, updatePaymentSchema } from \"./schema\";\n\nconst app = express(); // Initialize the Express app\napp.set(\"view engine\", \"ejs\"); // Set the view engine to EJS\n\nconst payment = express.Router();\nconst paypal = require(\"paypal-rest-sdk\");\n\npaypal.configure({\n  mode: \"sandbox\", // sandbox or live\n  client_id:\n    \"AcmQTWo29gmRgHYMgbXjATiVnXHi-BgrpMIPvy7hEvHgHsQIa4jmgKj4geiMhgLLH2nV4Ns5Y0_f_nv1\",\n  client_secret:\n    \"EPbPDqR49DSsW59ES8ggYq9rWn-TbPeTPVaaLmz2o4nZONXi8qLRweFKEYcZIprMylkNyjaHQRghZi4G\",\n});\n\napp.post(\"/pay\", (req, res) => {\n  const create_payment_json = {\n    intent: \"sale\",\n    payer: {\n      payment_method: \"paypal\",\n    },\n    redirect_urls: {\n      return_url: \"http://localhost:4003/api/v1/payments/success\",\n      cancel_url: \"http://localhost:4003/api/v1/payments/cancel\",\n    },\n    transactions: [\n      {\n        item_list: {\n          items: [\n            {\n              name: \"Red Sox Hat\",\n              sku: \"001\",\n              price: \"25.00\",\n              currency: \"USD\",\n              quantity: 1,\n            },\n          ],\n        },\n        amount: {\n          currency: \"USD\",\n          total: \"25.00\",\n        },\n        description: \"Hat for the best team ever\",\n      },\n    ],\n  };\n\n  paypal.payment.create(create_payment_json, function (error, payment) {\n    if (error) {\n      throw error;\n    } else {\n      for (let index = 0; index < payment.links.length; index++) {\n        if (payment.links[index].rel === \"approval_url\") {\n          res.redirect(payment.links[index].href);\n        }\n      }\n    }\n  });\n});\n\npayment.post(\n  \"/\",\n  celebrate({ [Segments.BODY]: createPaymentSchema }),\n  asyncHandler(async function controllerCreatePayment(req, res) {\n    const data = await serviceCreatePayment({\n      ...req.body,\n      user_id: mongoose.Types.ObjectId(req.body.user_id), // convert user_id to ObjectId\n    });\n    return toSuccess({ res, data, message: \"Payment created successfully!\" });\n  })\n);\n\napp.get(\"/paypal\", (req, res) => res.render(\"index\"));\n\napp.get(\"/success\", (req, res) => {\n  const payerID = req.query.PayerID;\n  const paymentId = req.query.paymentId;\n\n  const execute_payment_json = {\n    payer_id: payerID,\n    transactions: [\n      {\n        amount: {\n          currency: \"USD\",\n          total: \"25.00\",\n        },\n      },\n    ],\n  };\n\n  paypal.payment.execute(\n    paymentId,\n    execute_payment_json,\n    function (error, payment) {\n      if (error) {\n        console.log(error.response);\n        throw error;\n      } else {\n        console.log(JSON.stringify(payment));\n        res.send(\"Success\");\n      }\n    }\n  );\n});\n\napp.get(\"/cancel\", (req, res) => res.send(\"Cancelled\"));\n\npayment.get(\n  \"/\",\n  filterQuery,\n  asyncHandler(async function controllerGetPayments(req, res) {\n    const data = await serviceGetPayments(\n      req.query.filter,\n      req.query.sort,\n      req.query.page,\n      req.query.limit\n    );\n    return toSuccess({ res, data, message: \"Payments fetched successfully!\" });\n  })\n);\n\npayment.get(\n  \"/:id\",\n  celebrate({ [Segments.PARAMS]: objectIdSchema() }),\n  asyncHandler(async function controllerGetPaymentById(req, res) {\n    const data = await serviceGetPaymentById(req.params.id);\n    return toSuccess({ res, data, message: \"Payment fetched successfully!\" });\n  })\n);\n\npayment.patch(\n  \"/:id\",\n  celebrate({\n    [Segments.PARAMS]: objectIdSchema(),\n    [Segments.BODY]: updatePaymentSchema,\n  }),\n  asyncHandler(async function controllerUpdatePaymentById(req, res) {\n    const data = await serviceUpdatePaymentById(req.params.id, req.body);\n    return toSuccess({ res, data, message: \"Payment updated successfully!\" });\n  })\n);\n\npayment.delete(\n  \"/:id\",\n  celebrate({ [Segments.PARAMS]: objectIdSchema() }),\n  asyncHandler(async function controllerDeletePaymentById(req, res) {\n    const data = await serviceDeletePaymentById(req.params.id);\n    return toSuccess({ res, data, message: \"Payment deleted successfully!\" });\n  })\n);\n\napp.use(payment); // Mount the payment router on the Express app\n\nexport default app;\n"],
  "mappings": "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",
  "names": ["express", "payment", "mongoose", "filterQuery"]
}
