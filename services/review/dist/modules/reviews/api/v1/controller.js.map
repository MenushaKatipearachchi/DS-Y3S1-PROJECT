{
  "version": 3,
  "sources": ["../../../../../src/modules/reviews/api/v1/controller.js"],
  "sourcesContent": ["import express from \"express\";\nimport mongoose from \"mongoose\";\n// import { Joi } from \"celebrate\";\nimport { celebrate, Segments } from \"celebrate\";\nimport { default as filterQuery } from \"@sliit-foss/mongoose-filter-query\";\nimport { asyncHandler } from \"@sliit-foss/functions\";\nimport { objectIdSchema } from \"@app/constants\";\nimport { ratingParamSchema } from \"@app/constants\";\nimport { toSuccess } from \"@app/middleware\";\nimport {\n  serviceCreateReview,\n  serviceGetReviews,\n  serviceGetReviewById,\n  serviceGetReviewByRating,\n  serviceUpdateReviewById,\n  serviceDeleteReviewById,\n} from \"./service\";\n\nimport { createReviewSchema, updateReviewSchema } from \"./schema\";\n\nconst review = express.Router();\n\nreview.post(\n  \"/\",\n  celebrate({ [Segments.BODY]: createReviewSchema }),\n  asyncHandler(async function controllerCreateReview(req, res) {\n    const data = await serviceCreateReview(req.body);\n    return toSuccess({ res, data, message: \"Review created successfully!\" });\n  })\n);\n\n// review.get(\n//   \"/\",\n//   filterQuery,\n//   asyncHandler(async function controllerGetReviews(req, res) {\n//     const data = await serviceGetReviews(\n//       req.query.filter,\n//       req.query.sort,\n//       req.query.page,\n//       req.query.limit\n//     );\n//     return toSuccess({ res, data, message: \"Reviews fetched successfully!\" });\n//   })\n// );\n\nreview.get(\n  \"/\",\n  filterQuery,\n  asyncHandler(async function controllerGetReviews(req, res) {\n    const { filter, sort, page, limit } = req.query;\n    const data = await serviceGetReviews(filter, sort, page, limit);\n    return toSuccess({ res, data, message: \"Reviews fetched successfully!\" });\n  })\n);\n\nreview.get(\n  \"/:id\",\n  celebrate({ [Segments.PARAMS]: objectIdSchema() }),\n  asyncHandler(async function controllerGetReviewById(req, res) {\n    const data = await serviceGetReviewById(req.params.id);\n    return toSuccess({ res, data, message: \"Review fetched successfully!\" });\n  })\n);\n\n// get review by rating\nreview.get(\n  \"/rating/:rating\",\n  celebrate({ [Segments.PARAMS]: ratingParamSchema() }),\n  asyncHandler(async function controllerGetReviewByRating(req, res) {\n    const data = await serviceGetReviewByRating(req.params.rating);\n    return toSuccess({ res, data, message: \"Reviews fetched successfully!\" });\n  })\n);\n\nreview.patch(\n  \"/:id\",\n  celebrate({\n    [Segments.PARAMS]: objectIdSchema(),\n    [Segments.BODY]: updateReviewSchema,\n  }),\n  asyncHandler(async function controllerUpdateReviewById(req, res) {\n    const data = await serviceUpdateReviewById(req.params.id, req.body);\n    return toSuccess({ res, data, message: \"Review updated successfully!\" });\n  })\n);\n\nreview.delete(\n  \"/:id\",\n  celebrate({ [Segments.PARAMS]: objectIdSchema() }),\n  asyncHandler(async function controllerDeleteReviewById(req, res) {\n    const data = await serviceDeleteReviewById(req.params.id);\n    return toSuccess({ res, data, message: \"Review deleted successfully!\" });\n  })\n);\n\nexport default review;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoB;AACpB,sBAAqB;AAErB,uBAAoC;AACpC,mCAAuC;AACvC,uBAA6B;AAC7B,uBAA+B;AAC/B,IAAAA,oBAAkC;AAClC,wBAA0B;AAC1B,qBAOO;AAEP,oBAAuD;AAEvD,MAAM,SAAS,eAAAC,QAAQ,OAAO;AAE9B,OAAO;AAAA,EACL;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,IAAI,GAAG,iCAAmB,CAAC;AAAA,MACjD,+BAAa,sCAAe,uBAAuB,KAAK,KAAK;AAC3D,UAAM,OAAO,UAAM,oCAAoB,IAAI,IAAI;AAC/C,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,+BAA+B,CAAC;AAAA,EACzE,GAHa,yBAGZ;AACH;AAgBA,OAAO;AAAA,EACL;AAAA,EACA,6BAAAC;AAAA,MACA,+BAAa,sCAAe,qBAAqB,KAAK,KAAK;AACzD,UAAM,EAAE,QAAQ,MAAM,MAAM,MAAM,IAAI,IAAI;AAC1C,UAAM,OAAO,UAAM,kCAAkB,QAAQ,MAAM,MAAM,KAAK;AAC9D,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,gCAAgC,CAAC;AAAA,EAC1E,GAJa,uBAIZ;AACH;AAEA,OAAO;AAAA,EACL;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,MAAM,OAAG,iCAAe,EAAE,CAAC;AAAA,MACjD,+BAAa,sCAAe,wBAAwB,KAAK,KAAK;AAC5D,UAAM,OAAO,UAAM,qCAAqB,IAAI,OAAO,EAAE;AACrD,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,+BAA+B,CAAC;AAAA,EACzE,GAHa,0BAGZ;AACH;AAGA,OAAO;AAAA,EACL;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,MAAM,OAAG,qCAAkB,EAAE,CAAC;AAAA,MACpD,+BAAa,sCAAe,4BAA4B,KAAK,KAAK;AAChE,UAAM,OAAO,UAAM,yCAAyB,IAAI,OAAO,MAAM;AAC7D,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,gCAAgC,CAAC;AAAA,EAC1E,GAHa,8BAGZ;AACH;AAEA,OAAO;AAAA,EACL;AAAA,MACA,4BAAU;AAAA,IACR,CAAC,0BAAS,MAAM,OAAG,iCAAe;AAAA,IAClC,CAAC,0BAAS,IAAI,GAAG;AAAA,EACnB,CAAC;AAAA,MACD,+BAAa,sCAAe,2BAA2B,KAAK,KAAK;AAC/D,UAAM,OAAO,UAAM,wCAAwB,IAAI,OAAO,IAAI,IAAI,IAAI;AAClE,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,+BAA+B,CAAC;AAAA,EACzE,GAHa,6BAGZ;AACH;AAEA,OAAO;AAAA,EACL;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,MAAM,OAAG,iCAAe,EAAE,CAAC;AAAA,MACjD,+BAAa,sCAAe,2BAA2B,KAAK,KAAK;AAC/D,UAAM,OAAO,UAAM,wCAAwB,IAAI,OAAO,EAAE;AACxD,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,+BAA+B,CAAC;AAAA,EACzE,GAHa,6BAGZ;AACH;AAEA,IAAO,qBAAQ;",
  "names": ["import_constants", "express", "filterQuery"]
}
