{
  "version": 3,
  "sources": ["../../../../../src/modules/users/api/v1/controller.js"],
  "sourcesContent": ["import express from \"express\";\r\nimport { celebrate, Segments } from \"celebrate\";\r\nimport { default as filterQuery } from \"@sliit-foss/mongoose-filter-query\";\r\nimport { asyncHandler } from \"@sliit-foss/functions\";\r\nimport { objectIdSchema } from \"@app/constants\";\r\nimport { toSuccess } from \"@app/middleware\";\r\nimport {\r\n  serviceCreateUser,\r\n  serviceGetUsers,\r\n  serviceGetUserById,\r\n  serviceUpdateUserById,\r\n  serviceUpdateMultipleUsers,\r\n  serviceDeleteUserById,\r\n} from \"./service\";\r\n\r\nimport { createUserSchema, updateUserSchema } from \"./schema\";\r\n\r\nconst user = express.Router();\r\n\r\nuser.post(\r\n  \"/\",\r\n\r\n  celebrate({ [Segments.BODY]: createUserSchema }),\r\n\r\n  asyncHandler(async function controllerCreateUser(req, res) {\r\n    const data = await serviceCreateUser(req.body);\r\n    return toSuccess({ res, data, message: \"User created successfully!\" });\r\n  })\r\n);\r\n\r\nuser.get(\r\n  \"/\",\r\n  filterQuery,\r\n  asyncHandler(async function controllerGetUsers(req, res) {\r\n    const data = await serviceGetUsers(\r\n      req.query.filter,\r\n      req.query.sort,\r\n      req.query.page,\r\n      req.query.limit\r\n    );\r\n    return toSuccess({ res, data, message: \"Users fetched successfully!\" });\r\n  })\r\n);\r\n\r\nuser.get(\r\n  \"/:id\",\r\n  celebrate({ [Segments.PARAMS]: objectIdSchema() }),\r\n  asyncHandler(async function controllerGetUserById(req, res) {\r\n    const data = await serviceGetUserById(req.params.id);\r\n    return toSuccess({ res, data, message: \"User fetched successfully!\" });\r\n  })\r\n);\r\n\r\nuser.patch(\r\n  \"/:id\",\r\n  celebrate({\r\n    [Segments.PARAMS]: objectIdSchema(),\r\n    [Segments.BODY]: updateUserSchema,\r\n  }),\r\n  asyncHandler(async function controllerUpdateUserById(req, res) {\r\n    const data = await serviceUpdateUserById(req.params.id, req.body);\r\n    return toSuccess({ res, data, message: \"User updated successfully!\" });\r\n  })\r\n);\r\n\r\nuser.patch(\r\n  \"/\",\r\n  filterQuery,\r\n  celebrate({ [Segments.BODY]: updateUserSchema }),\r\n  asyncHandler(async function controllerUpdateMultipleUsers(req, res) {\r\n    const data = await serviceUpdateMultipleUsers(req.query.filter, req.body);\r\n    return toSuccess({ res, data, message: \"Users updated successfully!\" });\r\n  })\r\n);\r\n\r\nuser.delete(\r\n  \"/:id\",\r\n  celebrate({ [Segments.PARAMS]: objectIdSchema() }),\r\n  asyncHandler(async function controllerDeleteUserById(req, res) {\r\n    const data = await serviceDeleteUserById(req.params.id);\r\n    return toSuccess({ res, data, message: \"User deleted successfully!\" });\r\n  })\r\n);\r\n\r\nexport default user;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoB;AACpB,uBAAoC;AACpC,mCAAuC;AACvC,uBAA6B;AAC7B,uBAA+B;AAC/B,wBAA0B;AAC1B,qBAOO;AAEP,oBAAmD;AAEnD,MAAM,OAAO,eAAAA,QAAQ,OAAO;AAE5B,KAAK;AAAA,EACH;AAAA,MAEA,4BAAU,EAAE,CAAC,0BAAS,IAAI,GAAG,+BAAiB,CAAC;AAAA,MAE/C,+BAAa,sCAAe,qBAAqB,KAAK,KAAK;AACzD,UAAM,OAAO,UAAM,kCAAkB,IAAI,IAAI;AAC7C,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,6BAA6B,CAAC;AAAA,EACvE,GAHa,uBAGZ;AACH;AAEA,KAAK;AAAA,EACH;AAAA,EACA,6BAAAC;AAAA,MACA,+BAAa,sCAAe,mBAAmB,KAAK,KAAK;AACvD,UAAM,OAAO,UAAM;AAAA,MACjB,IAAI,MAAM;AAAA,MACV,IAAI,MAAM;AAAA,MACV,IAAI,MAAM;AAAA,MACV,IAAI,MAAM;AAAA,IACZ;AACA,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,8BAA8B,CAAC;AAAA,EACxE,GARa,qBAQZ;AACH;AAEA,KAAK;AAAA,EACH;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,MAAM,OAAG,iCAAe,EAAE,CAAC;AAAA,MACjD,+BAAa,sCAAe,sBAAsB,KAAK,KAAK;AAC1D,UAAM,OAAO,UAAM,mCAAmB,IAAI,OAAO,EAAE;AACnD,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,6BAA6B,CAAC;AAAA,EACvE,GAHa,wBAGZ;AACH;AAEA,KAAK;AAAA,EACH;AAAA,MACA,4BAAU;AAAA,IACR,CAAC,0BAAS,MAAM,OAAG,iCAAe;AAAA,IAClC,CAAC,0BAAS,IAAI,GAAG;AAAA,EACnB,CAAC;AAAA,MACD,+BAAa,sCAAe,yBAAyB,KAAK,KAAK;AAC7D,UAAM,OAAO,UAAM,sCAAsB,IAAI,OAAO,IAAI,IAAI,IAAI;AAChE,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,6BAA6B,CAAC;AAAA,EACvE,GAHa,2BAGZ;AACH;AAEA,KAAK;AAAA,EACH;AAAA,EACA,6BAAAA;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,IAAI,GAAG,+BAAiB,CAAC;AAAA,MAC/C,+BAAa,sCAAe,8BAA8B,KAAK,KAAK;AAClE,UAAM,OAAO,UAAM,2CAA2B,IAAI,MAAM,QAAQ,IAAI,IAAI;AACxE,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,8BAA8B,CAAC;AAAA,EACxE,GAHa,gCAGZ;AACH;AAEA,KAAK;AAAA,EACH;AAAA,MACA,4BAAU,EAAE,CAAC,0BAAS,MAAM,OAAG,iCAAe,EAAE,CAAC;AAAA,MACjD,+BAAa,sCAAe,yBAAyB,KAAK,KAAK;AAC7D,UAAM,OAAO,UAAM,sCAAsB,IAAI,OAAO,EAAE;AACtD,eAAO,6BAAU,EAAE,KAAK,MAAM,SAAS,6BAA6B,CAAC;AAAA,EACvE,GAHa,2BAGZ;AACH;AAEA,IAAO,qBAAQ;",
  "names": ["express", "filterQuery"]
}
