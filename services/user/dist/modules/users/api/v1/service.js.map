{
  "version": 3,
  "sources": ["../../../../../src/modules/users/api/v1/service.js"],
  "sourcesContent": ["import crypto from \"crypto\";\r\nimport {\r\n  createUser,\r\n  getAllUsers,\r\n  getUserById,\r\n  updateUserById,\r\n  updateMultipleUsers,\r\n  deleteUserById,\r\n} from \"../../repository\";\r\n\r\nimport { hashPasswordIfProvided } from \"./helpers\";\r\n\r\nexport const serviceCreateUser = async (user) => {\r\n  if (!user.password) user.password = crypto.randomBytes(20).toString(\"hex\");\r\n  await hashPasswordIfProvided(user);\r\n  return createUser(user);\r\n};\r\n\r\nexport const serviceGetUsers = (filters, sorts, page, limit) => {\r\n  return getAllUsers({ filters, sorts, page, limit });\r\n};\r\n\r\nexport const serviceGetUserById = (id) => {\r\n  return getUserById(id);\r\n};\r\n\r\nexport const serviceUpdateUserById = async (id, data) => {\r\n  await hashPasswordIfProvided(data);\r\n  return updateUserById(id, data);\r\n};\r\n\r\nexport const serviceUpdateMultipleUsers = async (filters, data) => {\r\n  await hashPasswordIfProvided(data);\r\n  return updateMultipleUsers(filters, data);\r\n};\r\n\r\nexport const serviceDeleteUserById = (id) => {\r\n  return deleteUserById(id);\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAmB;AACnB,wBAOO;AAEP,qBAAuC;AAEhC,MAAM,oBAAoB,8BAAO,SAAS;AAC/C,MAAI,CAAC,KAAK;AAAU,SAAK,WAAW,cAAAA,QAAO,YAAY,EAAE,EAAE,SAAS,KAAK;AACzE,YAAM,uCAAuB,IAAI;AACjC,aAAO,8BAAW,IAAI;AACxB,GAJiC;AAM1B,MAAM,kBAAkB,wBAAC,SAAS,OAAO,MAAM,UAAU;AAC9D,aAAO,+BAAY,EAAE,SAAS,OAAO,MAAM,MAAM,CAAC;AACpD,GAF+B;AAIxB,MAAM,qBAAqB,wBAAC,OAAO;AACxC,aAAO,+BAAY,EAAE;AACvB,GAFkC;AAI3B,MAAM,wBAAwB,8BAAO,IAAI,SAAS;AACvD,YAAM,uCAAuB,IAAI;AACjC,aAAO,kCAAe,IAAI,IAAI;AAChC,GAHqC;AAK9B,MAAM,6BAA6B,8BAAO,SAAS,SAAS;AACjE,YAAM,uCAAuB,IAAI;AACjC,aAAO,uCAAoB,SAAS,IAAI;AAC1C,GAH0C;AAKnC,MAAM,wBAAwB,wBAAC,OAAO;AAC3C,aAAO,kCAAe,EAAE;AAC1B,GAFqC;",
  "names": ["crypto"]
}
